// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios17.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name http_client
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import http_client
public protocol HttpClient {
  #if compiler(>=5.3) && $AsyncAwait
  func makeAsyncApiCall<T>(for request: Foundation.URLRequest) async throws -> T where T : Swift.Decodable, T : Swift.Encodable
  #endif
}
extension Foundation.URLSession : http_client.HttpClient, Foundation.URLSessionDelegate {
  #if compiler(>=5.3) && $AsyncAwait
  public func makeAsyncApiCall<T>(for request: Foundation.URLRequest) async throws -> T where T : Swift.Decodable
  #endif
}
public enum ApiError : Swift.Error {
  case networkError(any Swift.Error)
  case httpError(Swift.Int)
  case decodingError(any Swift.Error)
  case unknownError
}
public enum HTTPMethod : Swift.String {
  case GET
  case POST
  case PUT
  case DELETE
  case PATCH
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol ApiEndpoint {
  var baseURLString: Swift.String { get }
  var apiPath: Swift.String { get }
  var apiVersion: Swift.String { get }
  var headers: [Swift.String : Swift.String]? { get }
  var method: http_client.HTTPMethod { get }
  var apiKey: Swift.String? { get }
}
extension http_client.ApiEndpoint where Self : Swift.RawRepresentable, Self.RawValue == Swift.String {
  public func makeRequest(pathComponent: Swift.String? = nil) -> Foundation.URLRequest
  public func makeRequest(pathComponent: Swift.String? = nil, params: [Swift.String : Swift.String]) -> Foundation.URLRequest
  public func makeRequest(pathComponent: Swift.String? = nil, httpBody: Foundation.Data) -> Foundation.URLRequest
}
extension http_client.HTTPMethod : Swift.Equatable {}
extension http_client.HTTPMethod : Swift.Hashable {}
extension http_client.HTTPMethod : Swift.RawRepresentable {}
